// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "music.h"

// musicfile_t
// 

const musicfile_t::music_sequence& musicfile_t::
music () const
{
  return this->music_;
}

musicfile_t::music_sequence& musicfile_t::
music ()
{
  return this->music_;
}

void musicfile_t::
music (const music_sequence& s)
{
  this->music_ = s;
}


// music_t
// 

const music_t::ident_type& music_t::
ident () const
{
  return this->ident_.get ();
}

music_t::ident_type& music_t::
ident ()
{
  return this->ident_.get ();
}

void music_t::
ident (const ident_type& x)
{
  this->ident_.set (x);
}

void music_t::
ident (::std::auto_ptr< ident_type > x)
{
  this->ident_.set (x);
}

const music_t::musictype_type& music_t::
musictype () const
{
  return this->musictype_.get ();
}

music_t::musictype_type& music_t::
musictype ()
{
  return this->musictype_.get ();
}

void music_t::
musictype (const musictype_type& x)
{
  this->musictype_.set (x);
}

void music_t::
musictype (::std::auto_ptr< musictype_type > x)
{
  this->musictype_.set (x);
}

const music_t::file_type& music_t::
file () const
{
  return this->file_.get ();
}

music_t::file_type& music_t::
file ()
{
  return this->file_.get ();
}

void music_t::
file (const file_type& x)
{
  this->file_.set (x);
}

void music_t::
file (::std::auto_ptr< file_type > x)
{
  this->file_.set (x);
}


// musictype_t
// 

musictype_t::
musictype_t (value v)
: ::xml_schema::string (_xsd_musictype_t_literals_[v])
{
}

musictype_t::
musictype_t (const char* v)
: ::xml_schema::string (v)
{
}

musictype_t::
musictype_t (const ::std::string& v)
: ::xml_schema::string (v)
{
}

musictype_t::
musictype_t (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

musictype_t::
musictype_t (const musictype_t& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

musictype_t& musictype_t::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_musictype_t_literals_[v]);

  return *this;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// musicfile_t
//

musicfile_t::
musicfile_t ()
: ::xml_schema::type (),
  music_ (::xml_schema::flags (), this)
{
}

musicfile_t::
musicfile_t (const musicfile_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  music_ (x.music_, f, this)
{
}

musicfile_t::
musicfile_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  music_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void musicfile_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // music
    //
    if (n.name () == "music" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< music_type > r (
        music_traits::create (i, f, this));

      this->music_.push_back (r);
      continue;
    }

    break;
  }
}

musicfile_t* musicfile_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class musicfile_t (*this, f, c);
}

musicfile_t::
~musicfile_t ()
{
}

// music_t
//

music_t::
music_t (const ident_type& ident,
         const musictype_type& musictype,
         const file_type& file)
: ::xml_schema::type (),
  ident_ (ident, ::xml_schema::flags (), this),
  musictype_ (musictype, ::xml_schema::flags (), this),
  file_ (file, ::xml_schema::flags (), this)
{
}

music_t::
music_t (const music_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  ident_ (x.ident_, f, this),
  musictype_ (x.musictype_, f, this),
  file_ (x.file_, f, this)
{
}

music_t::
music_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  ident_ (f, this),
  musictype_ (f, this),
  file_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void music_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "ident" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< ident_type > r (
        ident_traits::create (i, f, this));

      this->ident_.set (r);
      continue;
    }

    if (n.name () == "musictype" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< musictype_type > r (
        musictype_traits::create (i, f, this));

      this->musictype_.set (r);
      continue;
    }

    if (n.name () == "file" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< file_type > r (
        file_traits::create (i, f, this));

      this->file_.set (r);
      continue;
    }
  }

  if (!ident_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "ident",
      "");
  }

  if (!musictype_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "musictype",
      "");
  }

  if (!file_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "file",
      "");
  }
}

music_t* music_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class music_t (*this, f, c);
}

music_t::
~music_t ()
{
}

// musictype_t
//

musictype_t::
musictype_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_musictype_t_convert ();
}

musictype_t::
musictype_t (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_musictype_t_convert ();
}

musictype_t::
musictype_t (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_musictype_t_convert ();
}

musictype_t* musictype_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class musictype_t (*this, f, c);
}

musictype_t::value musictype_t::
_xsd_musictype_t_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_musictype_t_literals_);
  const value* i (::std::lower_bound (
                    _xsd_musictype_t_indexes_,
                    _xsd_musictype_t_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_musictype_t_indexes_ + 2 || _xsd_musictype_t_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const musictype_t::
_xsd_musictype_t_literals_[2] =
{
  "MUSIC",
  "SOUND"
};

const musictype_t::value musictype_t::
_xsd_musictype_t_indexes_[2] =
{
  ::musictype_t::MUSIC,
  ::musictype_t::SOUND
};

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::musicfile_t >
musicfile (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::musicfile_t > r (
    ::musicfile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::musicfile_t >
musicfile (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::musicfile_t > r (
    ::musicfile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::musicfile_t >
musicfile (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::musicfile_t > r (
    ::musicfile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::musicfile_t >
musicfile (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::musicfile (isrc, f, p);
}

::std::auto_ptr< ::musicfile_t >
musicfile (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::musicfile (isrc, h, f, p);
}

::std::auto_ptr< ::musicfile_t >
musicfile (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::musicfile (isrc, h, f, p);
}

::std::auto_ptr< ::musicfile_t >
musicfile (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::musicfile (isrc, f, p);
}

::std::auto_ptr< ::musicfile_t >
musicfile (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::musicfile (isrc, h, f, p);
}

::std::auto_ptr< ::musicfile_t >
musicfile (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::musicfile (isrc, h, f, p);
}

::std::auto_ptr< ::musicfile_t >
musicfile (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::musicfile_t > r (
    ::musicfile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::musicfile_t >
musicfile (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::musicfile_t > r (
    ::musicfile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::musicfile_t >
musicfile (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::musicfile_t > r (
    ::musicfile (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::musicfile_t >
musicfile (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::musicfile_t > r (
      ::musicfile (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "musicfile" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::musicfile_t > r (
      ::xsd::cxx::tree::traits< ::musicfile_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "musicfile",
    "");
}

::std::auto_ptr< ::musicfile_t >
musicfile (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "musicfile" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::musicfile_t > r (
      ::xsd::cxx::tree::traits< ::musicfile_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "musicfile",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const musicfile_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // music
  //
  for (musicfile_t::music_const_iterator
       b (i.music ().begin ()), n (i.music ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "music",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const music_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // ident
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "ident",
        e));

    a << i.ident ();
  }

  // musictype
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "musictype",
        e));

    a << i.musictype ();
  }

  // file
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "file",
        e));

    a << i.file ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const musictype_t& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const musictype_t& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const musictype_t& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
musicfile (::std::ostream& o,
           const ::musicfile_t& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::musicfile (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
musicfile (::std::ostream& o,
           const ::musicfile_t& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::musicfile (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
musicfile (::std::ostream& o,
           const ::musicfile_t& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::musicfile (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
musicfile (::xercesc::XMLFormatTarget& t,
           const ::musicfile_t& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::musicfile (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
musicfile (::xercesc::XMLFormatTarget& t,
           const ::musicfile_t& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::musicfile (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
musicfile (::xercesc::XMLFormatTarget& t,
           const ::musicfile_t& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::musicfile (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
musicfile (::xercesc::DOMDocument& d,
           const ::musicfile_t& s,
           ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "musicfile" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "musicfile",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
musicfile (const ::musicfile_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "musicfile",
      "",
      m, f));

  ::musicfile (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

