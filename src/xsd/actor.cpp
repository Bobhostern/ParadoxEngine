// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "actor.h"

// actor_t
// 

const actor_t::stats_optional& actor_t::
stats () const
{
  return this->stats_;
}

actor_t::stats_optional& actor_t::
stats ()
{
  return this->stats_;
}

void actor_t::
stats (const stats_type& x)
{
  this->stats_.set (x);
}

void actor_t::
stats (const stats_optional& x)
{
  this->stats_ = x;
}

void actor_t::
stats (::std::auto_ptr< stats_type > x)
{
  this->stats_.set (x);
}

const actor_t::boosts_optional& actor_t::
boosts () const
{
  return this->boosts_;
}

actor_t::boosts_optional& actor_t::
boosts ()
{
  return this->boosts_;
}

void actor_t::
boosts (const boosts_type& x)
{
  this->boosts_.set (x);
}

void actor_t::
boosts (const boosts_optional& x)
{
  this->boosts_ = x;
}

void actor_t::
boosts (::std::auto_ptr< boosts_type > x)
{
  this->boosts_.set (x);
}

const actor_t::skills_optional& actor_t::
skills () const
{
  return this->skills_;
}

actor_t::skills_optional& actor_t::
skills ()
{
  return this->skills_;
}

void actor_t::
skills (const skills_type& x)
{
  this->skills_.set (x);
}

void actor_t::
skills (const skills_optional& x)
{
  this->skills_ = x;
}

void actor_t::
skills (::std::auto_ptr< skills_type > x)
{
  this->skills_.set (x);
}

const actor_t::keybinds_optional& actor_t::
keybinds () const
{
  return this->keybinds_;
}

actor_t::keybinds_optional& actor_t::
keybinds ()
{
  return this->keybinds_;
}

void actor_t::
keybinds (const keybinds_type& x)
{
  this->keybinds_.set (x);
}

void actor_t::
keybinds (const keybinds_optional& x)
{
  this->keybinds_ = x;
}

void actor_t::
keybinds (::std::auto_ptr< keybinds_type > x)
{
  this->keybinds_.set (x);
}

const actor_t::name_type& actor_t::
name () const
{
  return this->name_.get ();
}

actor_t::name_type& actor_t::
name ()
{
  return this->name_.get ();
}

void actor_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void actor_t::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}


// actortype_t
// 

actortype_t::
actortype_t (value v)
: ::xml_schema::string (_xsd_actortype_t_literals_[v])
{
}

actortype_t::
actortype_t (const char* v)
: ::xml_schema::string (v)
{
}

actortype_t::
actortype_t (const ::std::string& v)
: ::xml_schema::string (v)
{
}

actortype_t::
actortype_t (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

actortype_t::
actortype_t (const actortype_t& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

actortype_t& actortype_t::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_actortype_t_literals_[v]);

  return *this;
}


// stats_t
// 

const stats_t::baseHP_type& stats_t::
baseHP () const
{
  return this->baseHP_.get ();
}

stats_t::baseHP_type& stats_t::
baseHP ()
{
  return this->baseHP_.get ();
}

void stats_t::
baseHP (const baseHP_type& x)
{
  this->baseHP_.set (x);
}

const stats_t::baseMP_type& stats_t::
baseMP () const
{
  return this->baseMP_.get ();
}

stats_t::baseMP_type& stats_t::
baseMP ()
{
  return this->baseMP_.get ();
}

void stats_t::
baseMP (const baseMP_type& x)
{
  this->baseMP_.set (x);
}

const stats_t::baseAttack_type& stats_t::
baseAttack () const
{
  return this->baseAttack_.get ();
}

stats_t::baseAttack_type& stats_t::
baseAttack ()
{
  return this->baseAttack_.get ();
}

void stats_t::
baseAttack (const baseAttack_type& x)
{
  this->baseAttack_.set (x);
}

const stats_t::baseDefense_type& stats_t::
baseDefense () const
{
  return this->baseDefense_.get ();
}

stats_t::baseDefense_type& stats_t::
baseDefense ()
{
  return this->baseDefense_.get ();
}

void stats_t::
baseDefense (const baseDefense_type& x)
{
  this->baseDefense_.set (x);
}

const stats_t::baseAgility_type& stats_t::
baseAgility () const
{
  return this->baseAgility_.get ();
}

stats_t::baseAgility_type& stats_t::
baseAgility ()
{
  return this->baseAgility_.get ();
}

void stats_t::
baseAgility (const baseAgility_type& x)
{
  this->baseAgility_.set (x);
}

const stats_t::baseStrength_type& stats_t::
baseStrength () const
{
  return this->baseStrength_.get ();
}

stats_t::baseStrength_type& stats_t::
baseStrength ()
{
  return this->baseStrength_.get ();
}

void stats_t::
baseStrength (const baseStrength_type& x)
{
  this->baseStrength_.set (x);
}

const stats_t::baseMagicAttack_type& stats_t::
baseMagicAttack () const
{
  return this->baseMagicAttack_.get ();
}

stats_t::baseMagicAttack_type& stats_t::
baseMagicAttack ()
{
  return this->baseMagicAttack_.get ();
}

void stats_t::
baseMagicAttack (const baseMagicAttack_type& x)
{
  this->baseMagicAttack_.set (x);
}

const stats_t::baseMagicDefense_type& stats_t::
baseMagicDefense () const
{
  return this->baseMagicDefense_.get ();
}

stats_t::baseMagicDefense_type& stats_t::
baseMagicDefense ()
{
  return this->baseMagicDefense_.get ();
}

void stats_t::
baseMagicDefense (const baseMagicDefense_type& x)
{
  this->baseMagicDefense_.set (x);
}


// boosts_t
// 

const boosts_t::HPBoost_type& boosts_t::
HPBoost () const
{
  return this->HPBoost_.get ();
}

boosts_t::HPBoost_type& boosts_t::
HPBoost ()
{
  return this->HPBoost_.get ();
}

void boosts_t::
HPBoost (const HPBoost_type& x)
{
  this->HPBoost_.set (x);
}

const boosts_t::MPBoost_type& boosts_t::
MPBoost () const
{
  return this->MPBoost_.get ();
}

boosts_t::MPBoost_type& boosts_t::
MPBoost ()
{
  return this->MPBoost_.get ();
}

void boosts_t::
MPBoost (const MPBoost_type& x)
{
  this->MPBoost_.set (x);
}

const boosts_t::attackBoost_type& boosts_t::
attackBoost () const
{
  return this->attackBoost_.get ();
}

boosts_t::attackBoost_type& boosts_t::
attackBoost ()
{
  return this->attackBoost_.get ();
}

void boosts_t::
attackBoost (const attackBoost_type& x)
{
  this->attackBoost_.set (x);
}

const boosts_t::defenseBoost_type& boosts_t::
defenseBoost () const
{
  return this->defenseBoost_.get ();
}

boosts_t::defenseBoost_type& boosts_t::
defenseBoost ()
{
  return this->defenseBoost_.get ();
}

void boosts_t::
defenseBoost (const defenseBoost_type& x)
{
  this->defenseBoost_.set (x);
}

const boosts_t::agilityBoost_type& boosts_t::
agilityBoost () const
{
  return this->agilityBoost_.get ();
}

boosts_t::agilityBoost_type& boosts_t::
agilityBoost ()
{
  return this->agilityBoost_.get ();
}

void boosts_t::
agilityBoost (const agilityBoost_type& x)
{
  this->agilityBoost_.set (x);
}

const boosts_t::strengthBoost_type& boosts_t::
strengthBoost () const
{
  return this->strengthBoost_.get ();
}

boosts_t::strengthBoost_type& boosts_t::
strengthBoost ()
{
  return this->strengthBoost_.get ();
}

void boosts_t::
strengthBoost (const strengthBoost_type& x)
{
  this->strengthBoost_.set (x);
}

const boosts_t::magicAttackBoost_type& boosts_t::
magicAttackBoost () const
{
  return this->magicAttackBoost_.get ();
}

boosts_t::magicAttackBoost_type& boosts_t::
magicAttackBoost ()
{
  return this->magicAttackBoost_.get ();
}

void boosts_t::
magicAttackBoost (const magicAttackBoost_type& x)
{
  this->magicAttackBoost_.set (x);
}

const boosts_t::magicDefenseBoost_type& boosts_t::
magicDefenseBoost () const
{
  return this->magicDefenseBoost_.get ();
}

boosts_t::magicDefenseBoost_type& boosts_t::
magicDefenseBoost ()
{
  return this->magicDefenseBoost_.get ();
}

void boosts_t::
magicDefenseBoost (const magicDefenseBoost_type& x)
{
  this->magicDefenseBoost_.set (x);
}


// skills_t
// 

const skills_t::skill_sequence& skills_t::
skill () const
{
  return this->skill_;
}

skills_t::skill_sequence& skills_t::
skill ()
{
  return this->skill_;
}

void skills_t::
skill (const skill_sequence& s)
{
  this->skill_ = s;
}

const skills_t::folder_type& skills_t::
folder () const
{
  return this->folder_.get ();
}

skills_t::folder_type& skills_t::
folder ()
{
  return this->folder_.get ();
}

void skills_t::
folder (const folder_type& x)
{
  this->folder_.set (x);
}

void skills_t::
folder (::std::auto_ptr< folder_type > x)
{
  this->folder_.set (x);
}


// skill_t
// 

const skill_t::name_type& skill_t::
name () const
{
  return this->name_.get ();
}

skill_t::name_type& skill_t::
name ()
{
  return this->name_.get ();
}

void skill_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void skill_t::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const skill_t::file_type& skill_t::
file () const
{
  return this->file_.get ();
}

skill_t::file_type& skill_t::
file ()
{
  return this->file_.get ();
}

void skill_t::
file (const file_type& x)
{
  this->file_.set (x);
}

void skill_t::
file (::std::auto_ptr< file_type > x)
{
  this->file_.set (x);
}


// keybindscripts_t
// 

const keybindscripts_t::keybind_sequence& keybindscripts_t::
keybind () const
{
  return this->keybind_;
}

keybindscripts_t::keybind_sequence& keybindscripts_t::
keybind ()
{
  return this->keybind_;
}

void keybindscripts_t::
keybind (const keybind_sequence& s)
{
  this->keybind_ = s;
}

const keybindscripts_t::folder_type& keybindscripts_t::
folder () const
{
  return this->folder_.get ();
}

keybindscripts_t::folder_type& keybindscripts_t::
folder ()
{
  return this->folder_.get ();
}

void keybindscripts_t::
folder (const folder_type& x)
{
  this->folder_.set (x);
}

void keybindscripts_t::
folder (::std::auto_ptr< folder_type > x)
{
  this->folder_.set (x);
}


// keybind_t
// 

const keybind_t::key_type& keybind_t::
key () const
{
  return this->key_.get ();
}

keybind_t::key_type& keybind_t::
key ()
{
  return this->key_.get ();
}

void keybind_t::
key (const key_type& x)
{
  this->key_.set (x);
}

void keybind_t::
key (::std::auto_ptr< key_type > x)
{
  this->key_.set (x);
}

const keybind_t::scriptname_type& keybind_t::
scriptname () const
{
  return this->scriptname_.get ();
}

keybind_t::scriptname_type& keybind_t::
scriptname ()
{
  return this->scriptname_.get ();
}

void keybind_t::
scriptname (const scriptname_type& x)
{
  this->scriptname_.set (x);
}

void keybind_t::
scriptname (::std::auto_ptr< scriptname_type > x)
{
  this->scriptname_.set (x);
}


// akey_t
// 

akey_t::
akey_t (value v)
: ::xml_schema::string (_xsd_akey_t_literals_[v])
{
}

akey_t::
akey_t (const char* v)
: ::xml_schema::string (v)
{
}

akey_t::
akey_t (const ::std::string& v)
: ::xml_schema::string (v)
{
}

akey_t::
akey_t (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

akey_t::
akey_t (const akey_t& v,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

akey_t& akey_t::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_akey_t_literals_[v]);

  return *this;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// actor_t
//

actor_t::
actor_t (const name_type& name)
: ::xml_schema::type (),
  stats_ (::xml_schema::flags (), this),
  boosts_ (::xml_schema::flags (), this),
  skills_ (::xml_schema::flags (), this),
  keybinds_ (::xml_schema::flags (), this),
  name_ (name, ::xml_schema::flags (), this)
{
}

actor_t::
actor_t (const actor_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  stats_ (x.stats_, f, this),
  boosts_ (x.boosts_, f, this),
  skills_ (x.skills_, f, this),
  keybinds_ (x.keybinds_, f, this),
  name_ (x.name_, f, this)
{
}

actor_t::
actor_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  stats_ (f, this),
  boosts_ (f, this),
  skills_ (f, this),
  keybinds_ (f, this),
  name_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void actor_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // stats
    //
    if (n.name () == "stats" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< stats_type > r (
        stats_traits::create (i, f, this));

      if (!this->stats_)
      {
        this->stats_.set (r);
        continue;
      }
    }

    // boosts
    //
    if (n.name () == "boosts" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< boosts_type > r (
        boosts_traits::create (i, f, this));

      if (!this->boosts_)
      {
        this->boosts_.set (r);
        continue;
      }
    }

    // skills
    //
    if (n.name () == "skills" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< skills_type > r (
        skills_traits::create (i, f, this));

      if (!this->skills_)
      {
        this->skills_.set (r);
        continue;
      }
    }

    // keybinds
    //
    if (n.name () == "keybinds" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< keybinds_type > r (
        keybinds_traits::create (i, f, this));

      if (!this->keybinds_)
      {
        this->keybinds_.set (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      this->name_.set (r);
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

actor_t* actor_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class actor_t (*this, f, c);
}

actor_t::
~actor_t ()
{
}

// actortype_t
//

actortype_t::
actortype_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_actortype_t_convert ();
}

actortype_t::
actortype_t (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_actortype_t_convert ();
}

actortype_t::
actortype_t (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_actortype_t_convert ();
}

actortype_t* actortype_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class actortype_t (*this, f, c);
}

actortype_t::value actortype_t::
_xsd_actortype_t_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_actortype_t_literals_);
  const value* i (::std::lower_bound (
                    _xsd_actortype_t_indexes_,
                    _xsd_actortype_t_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_actortype_t_indexes_ + 3 || _xsd_actortype_t_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const actortype_t::
_xsd_actortype_t_literals_[3] =
{
  "PLAYER",
  "NPC",
  "ENEMY"
};

const actortype_t::value actortype_t::
_xsd_actortype_t_indexes_[3] =
{
  ::actortype_t::ENEMY,
  ::actortype_t::NPC,
  ::actortype_t::PLAYER
};

// stats_t
//

stats_t::
stats_t (const baseHP_type& baseHP,
         const baseMP_type& baseMP,
         const baseAttack_type& baseAttack,
         const baseDefense_type& baseDefense,
         const baseAgility_type& baseAgility,
         const baseStrength_type& baseStrength,
         const baseMagicAttack_type& baseMagicAttack,
         const baseMagicDefense_type& baseMagicDefense)
: ::xml_schema::type (),
  baseHP_ (baseHP, ::xml_schema::flags (), this),
  baseMP_ (baseMP, ::xml_schema::flags (), this),
  baseAttack_ (baseAttack, ::xml_schema::flags (), this),
  baseDefense_ (baseDefense, ::xml_schema::flags (), this),
  baseAgility_ (baseAgility, ::xml_schema::flags (), this),
  baseStrength_ (baseStrength, ::xml_schema::flags (), this),
  baseMagicAttack_ (baseMagicAttack, ::xml_schema::flags (), this),
  baseMagicDefense_ (baseMagicDefense, ::xml_schema::flags (), this)
{
}

stats_t::
stats_t (const stats_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  baseHP_ (x.baseHP_, f, this),
  baseMP_ (x.baseMP_, f, this),
  baseAttack_ (x.baseAttack_, f, this),
  baseDefense_ (x.baseDefense_, f, this),
  baseAgility_ (x.baseAgility_, f, this),
  baseStrength_ (x.baseStrength_, f, this),
  baseMagicAttack_ (x.baseMagicAttack_, f, this),
  baseMagicDefense_ (x.baseMagicDefense_, f, this)
{
}

stats_t::
stats_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  baseHP_ (f, this),
  baseMP_ (f, this),
  baseAttack_ (f, this),
  baseDefense_ (f, this),
  baseAgility_ (f, this),
  baseStrength_ (f, this),
  baseMagicAttack_ (f, this),
  baseMagicDefense_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void stats_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // baseHP
    //
    if (n.name () == "baseHP" && n.namespace_ ().empty ())
    {
      if (!baseHP_.present ())
      {
        this->baseHP_.set (baseHP_traits::create (i, f, this));
        continue;
      }
    }

    // baseMP
    //
    if (n.name () == "baseMP" && n.namespace_ ().empty ())
    {
      if (!baseMP_.present ())
      {
        this->baseMP_.set (baseMP_traits::create (i, f, this));
        continue;
      }
    }

    // baseAttack
    //
    if (n.name () == "baseAttack" && n.namespace_ ().empty ())
    {
      if (!baseAttack_.present ())
      {
        this->baseAttack_.set (baseAttack_traits::create (i, f, this));
        continue;
      }
    }

    // baseDefense
    //
    if (n.name () == "baseDefense" && n.namespace_ ().empty ())
    {
      if (!baseDefense_.present ())
      {
        this->baseDefense_.set (baseDefense_traits::create (i, f, this));
        continue;
      }
    }

    // baseAgility
    //
    if (n.name () == "baseAgility" && n.namespace_ ().empty ())
    {
      if (!baseAgility_.present ())
      {
        this->baseAgility_.set (baseAgility_traits::create (i, f, this));
        continue;
      }
    }

    // baseStrength
    //
    if (n.name () == "baseStrength" && n.namespace_ ().empty ())
    {
      if (!baseStrength_.present ())
      {
        this->baseStrength_.set (baseStrength_traits::create (i, f, this));
        continue;
      }
    }

    // baseMagicAttack
    //
    if (n.name () == "baseMagicAttack" && n.namespace_ ().empty ())
    {
      if (!baseMagicAttack_.present ())
      {
        this->baseMagicAttack_.set (baseMagicAttack_traits::create (i, f, this));
        continue;
      }
    }

    // baseMagicDefense
    //
    if (n.name () == "baseMagicDefense" && n.namespace_ ().empty ())
    {
      if (!baseMagicDefense_.present ())
      {
        this->baseMagicDefense_.set (baseMagicDefense_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!baseHP_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "baseHP",
      "");
  }

  if (!baseMP_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "baseMP",
      "");
  }

  if (!baseAttack_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "baseAttack",
      "");
  }

  if (!baseDefense_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "baseDefense",
      "");
  }

  if (!baseAgility_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "baseAgility",
      "");
  }

  if (!baseStrength_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "baseStrength",
      "");
  }

  if (!baseMagicAttack_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "baseMagicAttack",
      "");
  }

  if (!baseMagicDefense_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "baseMagicDefense",
      "");
  }
}

stats_t* stats_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class stats_t (*this, f, c);
}

stats_t::
~stats_t ()
{
}

// boosts_t
//

boosts_t::
boosts_t (const HPBoost_type& HPBoost,
          const MPBoost_type& MPBoost,
          const attackBoost_type& attackBoost,
          const defenseBoost_type& defenseBoost,
          const agilityBoost_type& agilityBoost,
          const strengthBoost_type& strengthBoost,
          const magicAttackBoost_type& magicAttackBoost,
          const magicDefenseBoost_type& magicDefenseBoost)
: ::xml_schema::type (),
  HPBoost_ (HPBoost, ::xml_schema::flags (), this),
  MPBoost_ (MPBoost, ::xml_schema::flags (), this),
  attackBoost_ (attackBoost, ::xml_schema::flags (), this),
  defenseBoost_ (defenseBoost, ::xml_schema::flags (), this),
  agilityBoost_ (agilityBoost, ::xml_schema::flags (), this),
  strengthBoost_ (strengthBoost, ::xml_schema::flags (), this),
  magicAttackBoost_ (magicAttackBoost, ::xml_schema::flags (), this),
  magicDefenseBoost_ (magicDefenseBoost, ::xml_schema::flags (), this)
{
}

boosts_t::
boosts_t (const boosts_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  HPBoost_ (x.HPBoost_, f, this),
  MPBoost_ (x.MPBoost_, f, this),
  attackBoost_ (x.attackBoost_, f, this),
  defenseBoost_ (x.defenseBoost_, f, this),
  agilityBoost_ (x.agilityBoost_, f, this),
  strengthBoost_ (x.strengthBoost_, f, this),
  magicAttackBoost_ (x.magicAttackBoost_, f, this),
  magicDefenseBoost_ (x.magicDefenseBoost_, f, this)
{
}

boosts_t::
boosts_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  HPBoost_ (f, this),
  MPBoost_ (f, this),
  attackBoost_ (f, this),
  defenseBoost_ (f, this),
  agilityBoost_ (f, this),
  strengthBoost_ (f, this),
  magicAttackBoost_ (f, this),
  magicDefenseBoost_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void boosts_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // HPBoost
    //
    if (n.name () == "HPBoost" && n.namespace_ ().empty ())
    {
      if (!HPBoost_.present ())
      {
        this->HPBoost_.set (HPBoost_traits::create (i, f, this));
        continue;
      }
    }

    // MPBoost
    //
    if (n.name () == "MPBoost" && n.namespace_ ().empty ())
    {
      if (!MPBoost_.present ())
      {
        this->MPBoost_.set (MPBoost_traits::create (i, f, this));
        continue;
      }
    }

    // attackBoost
    //
    if (n.name () == "attackBoost" && n.namespace_ ().empty ())
    {
      if (!attackBoost_.present ())
      {
        this->attackBoost_.set (attackBoost_traits::create (i, f, this));
        continue;
      }
    }

    // defenseBoost
    //
    if (n.name () == "defenseBoost" && n.namespace_ ().empty ())
    {
      if (!defenseBoost_.present ())
      {
        this->defenseBoost_.set (defenseBoost_traits::create (i, f, this));
        continue;
      }
    }

    // agilityBoost
    //
    if (n.name () == "agilityBoost" && n.namespace_ ().empty ())
    {
      if (!agilityBoost_.present ())
      {
        this->agilityBoost_.set (agilityBoost_traits::create (i, f, this));
        continue;
      }
    }

    // strengthBoost
    //
    if (n.name () == "strengthBoost" && n.namespace_ ().empty ())
    {
      if (!strengthBoost_.present ())
      {
        this->strengthBoost_.set (strengthBoost_traits::create (i, f, this));
        continue;
      }
    }

    // magicAttackBoost
    //
    if (n.name () == "magicAttackBoost" && n.namespace_ ().empty ())
    {
      if (!magicAttackBoost_.present ())
      {
        this->magicAttackBoost_.set (magicAttackBoost_traits::create (i, f, this));
        continue;
      }
    }

    // magicDefenseBoost
    //
    if (n.name () == "magicDefenseBoost" && n.namespace_ ().empty ())
    {
      if (!magicDefenseBoost_.present ())
      {
        this->magicDefenseBoost_.set (magicDefenseBoost_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!HPBoost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "HPBoost",
      "");
  }

  if (!MPBoost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "MPBoost",
      "");
  }

  if (!attackBoost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "attackBoost",
      "");
  }

  if (!defenseBoost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "defenseBoost",
      "");
  }

  if (!agilityBoost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "agilityBoost",
      "");
  }

  if (!strengthBoost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "strengthBoost",
      "");
  }

  if (!magicAttackBoost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "magicAttackBoost",
      "");
  }

  if (!magicDefenseBoost_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "magicDefenseBoost",
      "");
  }
}

boosts_t* boosts_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class boosts_t (*this, f, c);
}

boosts_t::
~boosts_t ()
{
}

// skills_t
//

skills_t::
skills_t (const folder_type& folder)
: ::xml_schema::type (),
  skill_ (::xml_schema::flags (), this),
  folder_ (folder, ::xml_schema::flags (), this)
{
}

skills_t::
skills_t (const skills_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  skill_ (x.skill_, f, this),
  folder_ (x.folder_, f, this)
{
}

skills_t::
skills_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  skill_ (f, this),
  folder_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void skills_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // skill
    //
    if (n.name () == "skill" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< skill_type > r (
        skill_traits::create (i, f, this));

      this->skill_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "folder" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< folder_type > r (
        folder_traits::create (i, f, this));

      this->folder_.set (r);
      continue;
    }
  }

  if (!folder_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "folder",
      "");
  }
}

skills_t* skills_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class skills_t (*this, f, c);
}

skills_t::
~skills_t ()
{
}

// skill_t
//

skill_t::
skill_t (const name_type& name,
         const file_type& file)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this),
  file_ (file, ::xml_schema::flags (), this)
{
}

skill_t::
skill_t (const skill_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  file_ (x.file_, f, this)
{
}

skill_t::
skill_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this),
  file_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void skill_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      this->name_.set (r);
      continue;
    }

    if (n.name () == "file" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< file_type > r (
        file_traits::create (i, f, this));

      this->file_.set (r);
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!file_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "file",
      "");
  }
}

skill_t* skill_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class skill_t (*this, f, c);
}

skill_t::
~skill_t ()
{
}

// keybindscripts_t
//

keybindscripts_t::
keybindscripts_t (const folder_type& folder)
: ::xml_schema::type (),
  keybind_ (::xml_schema::flags (), this),
  folder_ (folder, ::xml_schema::flags (), this)
{
}

keybindscripts_t::
keybindscripts_t (const keybindscripts_t& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  keybind_ (x.keybind_, f, this),
  folder_ (x.folder_, f, this)
{
}

keybindscripts_t::
keybindscripts_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  keybind_ (f, this),
  folder_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void keybindscripts_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // keybind
    //
    if (n.name () == "keybind" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< keybind_type > r (
        keybind_traits::create (i, f, this));

      this->keybind_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "folder" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< folder_type > r (
        folder_traits::create (i, f, this));

      this->folder_.set (r);
      continue;
    }
  }

  if (!folder_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "folder",
      "");
  }
}

keybindscripts_t* keybindscripts_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class keybindscripts_t (*this, f, c);
}

keybindscripts_t::
~keybindscripts_t ()
{
}

// keybind_t
//

keybind_t::
keybind_t (const key_type& key,
           const scriptname_type& scriptname)
: ::xml_schema::type (),
  key_ (key, ::xml_schema::flags (), this),
  scriptname_ (scriptname, ::xml_schema::flags (), this)
{
}

keybind_t::
keybind_t (const keybind_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  key_ (x.key_, f, this),
  scriptname_ (x.scriptname_, f, this)
{
}

keybind_t::
keybind_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  key_ (f, this),
  scriptname_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void keybind_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "key" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< key_type > r (
        key_traits::create (i, f, this));

      this->key_.set (r);
      continue;
    }

    if (n.name () == "scriptname" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< scriptname_type > r (
        scriptname_traits::create (i, f, this));

      this->scriptname_.set (r);
      continue;
    }
  }

  if (!key_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "key",
      "");
  }

  if (!scriptname_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "scriptname",
      "");
  }
}

keybind_t* keybind_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class keybind_t (*this, f, c);
}

keybind_t::
~keybind_t ()
{
}

// akey_t
//

akey_t::
akey_t (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_akey_t_convert ();
}

akey_t::
akey_t (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_akey_t_convert ();
}

akey_t::
akey_t (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_akey_t_convert ();
}

akey_t* akey_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class akey_t (*this, f, c);
}

akey_t::value akey_t::
_xsd_akey_t_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_akey_t_literals_);
  const value* i (::std::lower_bound (
                    _xsd_akey_t_indexes_,
                    _xsd_akey_t_indexes_ + 27,
                    *this,
                    c));

  if (i == _xsd_akey_t_indexes_ + 27 || _xsd_akey_t_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const akey_t::
_xsd_akey_t_literals_[27] =
{
  "ENTER",
  "TAB",
  "ESC",
  "RSHIFT",
  "RALT",
  "RDELETE",
  "RMETA",
  "LSHIFT",
  "LALT",
  "LDELETE",
  "LMETA",
  "UPARROW",
  "DOWNARROW",
  "LEFTARROW",
  "RIGHTARROW",
  "F1",
  "F2",
  "F3",
  "F4",
  "F5",
  "F6",
  "F7",
  "F8",
  "F9",
  "F10",
  "F11",
  "F12"
};

const akey_t::value akey_t::
_xsd_akey_t_indexes_[27] =
{
  ::akey_t::DOWNARROW,
  ::akey_t::ENTER,
  ::akey_t::ESC,
  ::akey_t::F1,
  ::akey_t::F10,
  ::akey_t::F11,
  ::akey_t::F12,
  ::akey_t::F2,
  ::akey_t::F3,
  ::akey_t::F4,
  ::akey_t::F5,
  ::akey_t::F6,
  ::akey_t::F7,
  ::akey_t::F8,
  ::akey_t::F9,
  ::akey_t::LALT,
  ::akey_t::LDELETE,
  ::akey_t::LEFTARROW,
  ::akey_t::LMETA,
  ::akey_t::LSHIFT,
  ::akey_t::RALT,
  ::akey_t::RDELETE,
  ::akey_t::RIGHTARROW,
  ::akey_t::RMETA,
  ::akey_t::RSHIFT,
  ::akey_t::TAB,
  ::akey_t::UPARROW
};

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::actor_t >
actor (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::actor_t > r (
    ::actor (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::actor_t >
actor (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::actor_t > r (
    ::actor (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::actor_t >
actor (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::actor_t > r (
    ::actor (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::actor_t >
actor (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::actor (isrc, f, p);
}

::std::auto_ptr< ::actor_t >
actor (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::actor (isrc, h, f, p);
}

::std::auto_ptr< ::actor_t >
actor (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::actor (isrc, h, f, p);
}

::std::auto_ptr< ::actor_t >
actor (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::actor (isrc, f, p);
}

::std::auto_ptr< ::actor_t >
actor (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::actor (isrc, h, f, p);
}

::std::auto_ptr< ::actor_t >
actor (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::actor (isrc, h, f, p);
}

::std::auto_ptr< ::actor_t >
actor (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::actor_t > r (
    ::actor (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::actor_t >
actor (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::actor_t > r (
    ::actor (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::actor_t >
actor (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::actor_t > r (
    ::actor (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::actor_t >
actor (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::actor_t > r (
      ::actor (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "actor" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::actor_t > r (
      ::xsd::cxx::tree::traits< ::actor_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "actor",
    "");
}

::std::auto_ptr< ::actor_t >
actor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "actor" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::actor_t > r (
      ::xsd::cxx::tree::traits< ::actor_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "actor",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const actor_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // stats
  //
  if (i.stats ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "stats",
        e));

    s << *i.stats ();
  }

  // boosts
  //
  if (i.boosts ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "boosts",
        e));

    s << *i.boosts ();
  }

  // skills
  //
  if (i.skills ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "skills",
        e));

    s << *i.skills ();
  }

  // keybinds
  //
  if (i.keybinds ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "keybinds",
        e));

    s << *i.keybinds ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const actortype_t& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const actortype_t& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const actortype_t& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const stats_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // baseHP
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "baseHP",
        e));

    s << i.baseHP ();
  }

  // baseMP
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "baseMP",
        e));

    s << i.baseMP ();
  }

  // baseAttack
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "baseAttack",
        e));

    s << i.baseAttack ();
  }

  // baseDefense
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "baseDefense",
        e));

    s << i.baseDefense ();
  }

  // baseAgility
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "baseAgility",
        e));

    s << i.baseAgility ();
  }

  // baseStrength
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "baseStrength",
        e));

    s << i.baseStrength ();
  }

  // baseMagicAttack
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "baseMagicAttack",
        e));

    s << i.baseMagicAttack ();
  }

  // baseMagicDefense
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "baseMagicDefense",
        e));

    s << i.baseMagicDefense ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const boosts_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // HPBoost
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "HPBoost",
        e));

    s << i.HPBoost ();
  }

  // MPBoost
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "MPBoost",
        e));

    s << i.MPBoost ();
  }

  // attackBoost
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "attackBoost",
        e));

    s << i.attackBoost ();
  }

  // defenseBoost
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "defenseBoost",
        e));

    s << i.defenseBoost ();
  }

  // agilityBoost
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "agilityBoost",
        e));

    s << i.agilityBoost ();
  }

  // strengthBoost
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "strengthBoost",
        e));

    s << i.strengthBoost ();
  }

  // magicAttackBoost
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "magicAttackBoost",
        e));

    s << i.magicAttackBoost ();
  }

  // magicDefenseBoost
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "magicDefenseBoost",
        e));

    s << i.magicDefenseBoost ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const skills_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // skill
  //
  for (skills_t::skill_const_iterator
       b (i.skill ().begin ()), n (i.skill ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "skill",
        e));

    s << *b;
  }

  // folder
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "folder",
        e));

    a << i.folder ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const skill_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // file
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "file",
        e));

    a << i.file ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const keybindscripts_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // keybind
  //
  for (keybindscripts_t::keybind_const_iterator
       b (i.keybind ().begin ()), n (i.keybind ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "keybind",
        e));

    s << *b;
  }

  // folder
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "folder",
        e));

    a << i.folder ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const keybind_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // key
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "key",
        e));

    a << i.key ();
  }

  // scriptname
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "scriptname",
        e));

    a << i.scriptname ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const akey_t& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const akey_t& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const akey_t& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
actor (::std::ostream& o,
       const ::actor_t& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::actor (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
actor (::std::ostream& o,
       const ::actor_t& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::actor (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
actor (::std::ostream& o,
       const ::actor_t& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::actor (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
actor (::xercesc::XMLFormatTarget& t,
       const ::actor_t& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::actor (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
actor (::xercesc::XMLFormatTarget& t,
       const ::actor_t& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::actor (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
actor (::xercesc::XMLFormatTarget& t,
       const ::actor_t& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::actor (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
actor (::xercesc::DOMDocument& d,
       const ::actor_t& s,
       ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "actor" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "actor",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
actor (const ::actor_t& s,
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "actor",
      "",
      m, f));

  ::actor (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

