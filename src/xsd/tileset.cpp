// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "tileset.h"

// tileset_t
// 

const tileset_t::tile_sequence& tileset_t::
tile () const
{
  return this->tile_;
}

tileset_t::tile_sequence& tileset_t::
tile ()
{
  return this->tile_;
}

void tileset_t::
tile (const tile_sequence& s)
{
  this->tile_ = s;
}

const tileset_t::name_type& tileset_t::
name () const
{
  return this->name_.get ();
}

tileset_t::name_type& tileset_t::
name ()
{
  return this->name_.get ();
}

void tileset_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void tileset_t::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}


// tile_t
// 

const tile_t::property_type& tile_t::
property () const
{
  return this->property_.get ();
}

tile_t::property_type& tile_t::
property ()
{
  return this->property_.get ();
}

void tile_t::
property (const property_type& x)
{
  this->property_.set (x);
}

void tile_t::
property (::std::auto_ptr< property_type > x)
{
  this->property_.set (x);
}

const tile_t::id_type& tile_t::
id () const
{
  return this->id_.get ();
}

tile_t::id_type& tile_t::
id ()
{
  return this->id_.get ();
}

void tile_t::
id (const id_type& x)
{
  this->id_.set (x);
}

const tile_t::width_type& tile_t::
width () const
{
  return this->width_.get ();
}

tile_t::width_type& tile_t::
width ()
{
  return this->width_.get ();
}

void tile_t::
width (const width_type& x)
{
  this->width_.set (x);
}

const tile_t::height_type& tile_t::
height () const
{
  return this->height_.get ();
}

tile_t::height_type& tile_t::
height ()
{
  return this->height_.get ();
}

void tile_t::
height (const height_type& x)
{
  this->height_.set (x);
}

const tile_t::texture_type& tile_t::
texture () const
{
  return this->texture_.get ();
}

tile_t::texture_type& tile_t::
texture ()
{
  return this->texture_.get ();
}

void tile_t::
texture (const texture_type& x)
{
  this->texture_.set (x);
}

void tile_t::
texture (::std::auto_ptr< texture_type > x)
{
  this->texture_.set (x);
}


// property_t
// 

property_t::
property_t (value v)
: ::xml_schema::string (_xsd_property_t_literals_[v])
{
}

property_t::
property_t (const char* v)
: ::xml_schema::string (v)
{
}

property_t::
property_t (const ::std::string& v)
: ::xml_schema::string (v)
{
}

property_t::
property_t (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

property_t::
property_t (const property_t& v,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

property_t& property_t::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_property_t_literals_[v]);

  return *this;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// tileset_t
//

tileset_t::
tileset_t (const name_type& name)
: ::xml_schema::type (),
  tile_ (::xml_schema::flags (), this),
  name_ (name, ::xml_schema::flags (), this)
{
}

tileset_t::
tileset_t (const tileset_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  tile_ (x.tile_, f, this),
  name_ (x.name_, f, this)
{
}

tileset_t::
tileset_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  tile_ (f, this),
  name_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void tileset_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // tile
    //
    if (n.name () == "tile" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< tile_type > r (
        tile_traits::create (i, f, this));

      this->tile_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      this->name_.set (r);
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

tileset_t* tileset_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class tileset_t (*this, f, c);
}

tileset_t::
~tileset_t ()
{
}

// tile_t
//

tile_t::
tile_t (const property_type& property,
        const id_type& id,
        const width_type& width,
        const height_type& height,
        const texture_type& texture)
: ::xml_schema::type (),
  property_ (property, ::xml_schema::flags (), this),
  id_ (id, ::xml_schema::flags (), this),
  width_ (width, ::xml_schema::flags (), this),
  height_ (height, ::xml_schema::flags (), this),
  texture_ (texture, ::xml_schema::flags (), this)
{
}

tile_t::
tile_t (const tile_t& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  property_ (x.property_, f, this),
  id_ (x.id_, f, this),
  width_ (x.width_, f, this),
  height_ (x.height_, f, this),
  texture_ (x.texture_, f, this)
{
}

tile_t::
tile_t (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  property_ (f, this),
  id_ (f, this),
  width_ (f, this),
  height_ (f, this),
  texture_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void tile_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "property" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< property_type > r (
        property_traits::create (i, f, this));

      this->property_.set (r);
      continue;
    }

    if (n.name () == "id" && n.namespace_ ().empty ())
    {
      this->id_.set (id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "width" && n.namespace_ ().empty ())
    {
      this->width_.set (width_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "height" && n.namespace_ ().empty ())
    {
      this->height_.set (height_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "texture" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< texture_type > r (
        texture_traits::create (i, f, this));

      this->texture_.set (r);
      continue;
    }
  }

  if (!property_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "property",
      "");
  }

  if (!id_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "id",
      "");
  }

  if (!width_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "width",
      "");
  }

  if (!height_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "height",
      "");
  }

  if (!texture_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "texture",
      "");
  }
}

tile_t* tile_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class tile_t (*this, f, c);
}

tile_t::
~tile_t ()
{
}

// property_t
//

property_t::
property_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_property_t_convert ();
}

property_t::
property_t (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_property_t_convert ();
}

property_t::
property_t (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_property_t_convert ();
}

property_t* property_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class property_t (*this, f, c);
}

property_t::value property_t::
_xsd_property_t_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_property_t_literals_);
  const value* i (::std::lower_bound (
                    _xsd_property_t_indexes_,
                    _xsd_property_t_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_property_t_indexes_ + 3 || _xsd_property_t_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const property_t::
_xsd_property_t_literals_[3] =
{
  "PASSABLE",
  "UNPASSABLE",
  "WATER"
};

const property_t::value property_t::
_xsd_property_t_indexes_[3] =
{
  ::property_t::PASSABLE,
  ::property_t::UNPASSABLE,
  ::property_t::WATER
};

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::tileset_t >
tileset (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::tileset_t > r (
    ::tileset (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::tileset_t >
tileset (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tileset_t > r (
    ::tileset (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::tileset_t >
tileset (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tileset_t > r (
    ::tileset (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::tileset_t >
tileset (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::tileset (isrc, f, p);
}

::std::auto_ptr< ::tileset_t >
tileset (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::tileset (isrc, h, f, p);
}

::std::auto_ptr< ::tileset_t >
tileset (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::tileset (isrc, h, f, p);
}

::std::auto_ptr< ::tileset_t >
tileset (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::tileset (isrc, f, p);
}

::std::auto_ptr< ::tileset_t >
tileset (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::tileset (isrc, h, f, p);
}

::std::auto_ptr< ::tileset_t >
tileset (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::tileset (isrc, h, f, p);
}

::std::auto_ptr< ::tileset_t >
tileset (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::tileset_t > r (
    ::tileset (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::tileset_t >
tileset (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tileset_t > r (
    ::tileset (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::tileset_t >
tileset (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tileset_t > r (
    ::tileset (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::tileset_t >
tileset (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::tileset_t > r (
      ::tileset (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "tileset" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::tileset_t > r (
      ::xsd::cxx::tree::traits< ::tileset_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "tileset",
    "");
}

::std::auto_ptr< ::tileset_t >
tileset (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "tileset" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::tileset_t > r (
      ::xsd::cxx::tree::traits< ::tileset_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "tileset",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const tileset_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // tile
  //
  for (tileset_t::tile_const_iterator
       b (i.tile ().begin ()), n (i.tile ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "tile",
        e));

    s << *b;
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const tile_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // property
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "property",
        e));

    a << i.property ();
  }

  // id
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "id",
        e));

    a << i.id ();
  }

  // width
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "width",
        e));

    a << i.width ();
  }

  // height
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "height",
        e));

    a << i.height ();
  }

  // texture
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "texture",
        e));

    a << i.texture ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const property_t& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const property_t& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const property_t& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
tileset (::std::ostream& o,
         const ::tileset_t& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tileset (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
tileset (::std::ostream& o,
         const ::tileset_t& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tileset (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
tileset (::std::ostream& o,
         const ::tileset_t& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tileset (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
tileset (::xercesc::XMLFormatTarget& t,
         const ::tileset_t& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tileset (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
tileset (::xercesc::XMLFormatTarget& t,
         const ::tileset_t& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tileset (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
tileset (::xercesc::XMLFormatTarget& t,
         const ::tileset_t& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tileset (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
tileset (::xercesc::DOMDocument& d,
         const ::tileset_t& s,
         ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "tileset" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "tileset",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
tileset (const ::tileset_t& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "tileset",
      "",
      m, f));

  ::tileset (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

